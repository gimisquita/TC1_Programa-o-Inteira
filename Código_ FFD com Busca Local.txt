import numpy as np
import sys 
np.set_printoptions(threshold=sys.maxsize)
import time

def evaluate_solution(a, w, K):
    bin_weights = np.dot(a, w)
    return np.sum(bin_weights > K)

def local_search(a, w, K, timeout=3600):  # Adicionei o parâmetro timeout
    start_time = time.time()
    improved = True
    while improved and time.time() - start_time < timeout:  # Verifica o tempo limite
        improved = False
        for i in range(len(w)):
            for j in range(len(a[0])):
                if a[i, j] == 1:
                    a[i, j] = 0  # Remove o item i do bin j
                    for k in range(len(a[0])):
                        if np.sum(a[:, k] * w) + w[i] <= K:
                            a[i, k] = 1  # Adiciona o item i ao bin k
                            improved = True
                            break
                    if improved:
                        break
                if improved:
                    break

m = 120  # número de itens
K = 150  # capacidade do bin
w = np.array([99,99,98,98,97,97,96,95,92,92,92,92,91,91,91,90,89,89,88,87,87,87,86,85,84,84,84,84,82,82,81,79,78,78,77,77,76,76,75,75,75,74,73,73,73,73,72,71,71,71,71,70,69,69,69,69,69,68,68,67,66,65,65,61,60,60,59,57,57,57,57,57,56,55,53,52,52,50,50,49,48,45,45,43,43,42,42,42,42,42,41,40,40,39,39,37,37,37,36,35,34,32,32,31,31,30,28,27,25,24,24,23,21,21,21,21,21,20,20,20])  # vetor de pesos
controla = np.array([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])  # vetor auxiliar
a = np.zeros((m, m))  # variável de decisão

nbins = 0
itens = m

while itens > 0:
    nbins = nbins + 1
    Kr = K
    for i in range(0, m):
        if controla[i] == 1:
            if w[i] <= Kr:
                Kr = Kr - w[i]
                controla[i] = 0
                itens = itens - 1
                a[i, nbins - 1] = 1

print('Solução inicial:')
print('Fobj = número de bins =', nbins)
print('Solução a =\n', a)

local_search(a, w, K)

print('\nSolução após busca local:')
print('Fobj = número de bins =', np.sum(a.any(axis=0)))
print('Solução a =\n', a)